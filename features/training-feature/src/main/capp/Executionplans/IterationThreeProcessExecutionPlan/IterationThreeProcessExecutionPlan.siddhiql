@Plan:name('IterationThreeProcessExecutionPlan')

@Plan:description('Anomaly Prediction - Iteration three features process plan for trainning')

--==========================================================================================================--
--////////////////////////////////////////////// IMPORTS ///////////////////////////////////////////////////--
--==========================================================================================================--
@Import('CPUUsageStream:1.0.0')
define stream CPUUsageStream (time_stamp long, app_id string, process_cpu_load double, system_cpu_load double);

@Import('MemoryUsageStream:1.0.0')
define stream MemoryUsageStream (time_stamp long, app_id string, 
								 max_heap long, allocated_heap long, used_heap long, 
								 max_non_heap long, allocated_non_heap long, used_non_heap long, 
								 pending_finalizations long
								);

@Import('GarbageCollectionStream:1.0.0')
define stream GarbageCollectionStream (time_stamp long, app_id string, gc_type string, gc_cause string, gc_duration long, 
									   eden_used_after long, eden_used_before long, survivor_used_after long, survivor_used_before long, old_used_after long, old_used_before long, 
									   eden_committed_after long, eden_committed_before long, survivor_committed_after long, survivor_committed_before long, old_committed_after long, old_committed_before long, 
									   eden_max_after long, eden_max_before long, survivor_max_after long, survivor_max_before long, old_max_after long, old_max_before long);

--==========================================================================================================--
--/////////////////////////////////////////// END OF IMPORTS ///////////////////////////////////////////////--
--==========================================================================================================--



--==========================================================================================================--
--////////////////////////////////////////////// EXPORTS ///////////////////////////////////////////////////--
--==========================================================================================================--
@Export('IterationThreeProcessedUsageStream:1.0.0')
define stream IterationThreeProcessedUsageStream (app_id string, time_stamp long, heap_free string, heap_growing_rate string, heap_used_free_proportion string, heap_range_5sec string, heap_avg_3sec string, heap_avg_5sec string, heap_avg_10sec string, heap_avg_30sec string, heap_std_3sec string, heap_std_5sec string, heap_std_10sec string, heap_std_30sec string, heap_growing_rate_avg_3sec string, heap_growing_rate_avg_5sec string, heap_growing_rate_avg_10sec string, heap_growing_rate_avg_30sec string, heap_growing_rate_std_3sec string, heap_growing_rate_std_5sec string, heap_growing_rate_std_10sec string, heap_growing_rate_std_30sec string, heap_used_free_proportion_avg_3sec string, heap_used_free_proportion_avg_5sec string, heap_used_free_proportion_avg_10sec string, heap_used_free_proportion_avg_30sec string, heap_used_free_proportion_std_3sec string, heap_used_free_proportion_std_5sec string, heap_used_free_proportion_std_10sec string, heap_used_free_proportion_std_30sec string, process_cpu_load string, system_cpu_load string, process_cpu_avg_5sec string, process_cpu_avg_10sec string, process_cpu_avg_30sec string, process_cpu_std_5sec string, process_cpu_std_10sec string, process_cpu_std_30sec string, minor_freq double, major_freq double, total_minor_duration double, total_major_duration double, avg_minor_duration double, avg_major_duration double, total_old_clearing_rate double, total_old_growing_rate_with_time double, avg_old_growing_rate_with_free double, avg_old_growing_with_free_plus_time double, young_gen_cleared double, old_gen_cleared double, old_free double);
--==========================================================================================================--
--/////////////////////////////////////////// END OF EXPORTS ///////////////////////////////////////////////--
--==========================================================================================================--

--==========================================================================================================--
--////////////////////////////////////////// INTERNAL DEFINES //////////////////////////////////////////////--
--==========================================================================================================--
define table GCCache (time_stamp long , app_id string , old_free double);
--==========================================================================================================--
--//////////////////////////////////////// END OF INTERNAL DEFINES /////////////////////////////////////////--
--==========================================================================================================--

--==========================================================================================================--
--//////////////////////////////////////// PROCESS GC EVENTS DATA///////////////////////////////////////////--
--==========================================================================================================--
--partition by app_id. used a sequence to collect 2 consecutive GC events with same app_id
partition with (app_id of GarbageCollectionStream)
begin
  from GarbageCollectionStream
  select 
	  app_id,
	  time_stamp,

	  gc_type,
	  gc_duration,

	  (eden_used_before + survivor_used_before) as young_used_before,
	  (eden_used_after + survivor_used_after) as young_used_after,
	  (eden_max_after + survivor_max_after) as young_max_after,
	  (old_used_before - old_used_after) as old_used_changed,
	  (old_max_after - old_used_after) as old_free_after,

	  old_used_before,
	  old_used_after,
	  old_max_after

  insert into #GCStream;
		
  from every g1 = #GCStream, g2 = #GCStream
	  select 
		  g2.app_id,
		  g2.time_stamp,

		  g2.gc_type,
		  g2.gc_duration,

		  --calculate heap generation parameters--
		  --young gen cleared with respect to gc duration and young used before
		  ifThenElse(g2.young_used_before > 0 and g2.gc_duration > 0 ,(convert(g2.young_used_before - g2.young_used_after + g2.old_used_changed, 'double')/g2.young_used_before)/g2.gc_duration , 0.0) as young_gen_cleared,

		  --old gen growing with respect to time(used max old gen to normalized)
		  ifThenElse(g1.old_used_after < g2.old_used_after and g2.old_max_after > 0, (convert(g2.old_used_after-g1.old_used_after, 'double')/g2.old_max_after) / (g2.time_stamp-g1.time_stamp), 0.0 ) as old_growing_rate_with_time,

		  --old gen growing with respect to old gen free memory (no normalize is needed)
		  ifThenElse(g1.old_used_after < g2.old_used_after and g1.old_free_after > 0, convert(g2.old_used_after-g1.old_used_after, 'double')/g1.old_free_after , 0.0 ) as old_growing_rate_with_free,

		  --old gen growing with respect to time and old gen free memory 
		  ifThenElse(g1.old_used_after < g2.old_used_after and g1.old_free_after > 0, (convert(g2.old_used_after-g1.old_used_after, 'double')/g1.old_free_after) / (g2.time_stamp-g1.time_stamp), 0.0 ) as old_growing_with_free_plus_time,

		  --old gen memory clearing with respect to time
		  ifThenElse(g1.old_used_after > g2.old_used_after and g2.old_max_after > 0, (convert(g1.old_used_after-g2.old_used_after, 'double')/g2.old_max_after)/(g2.time_stamp-g1.time_stamp), 0.0 ) as old_clearing_rate,

		  --old gen clearing with respect to gc guration and old used before
		  ifThenElse(g2.old_used_changed > 0 , (convert(g2.old_used_changed, 'double')/g2.old_used_before)/g2.gc_duration , 0.0 ) as old_gen_cleared,

		  --old free with respect to max
		  ifThenElse(g2.old_max_after > 0, (convert(g2.old_free_after, 'double')/g2.old_max_after) , 0.0 ) as old_free

  insert into GCProcessedUsageStream;
end;	
			
--catogerized events into major and minor
from GCProcessedUsageStream[not(gc_type is null)]
select 
	app_id,
	time_stamp,
	
	ifThenElse(gc_type == "minor",1,0)as minor, 
	ifThenElse(gc_type == "major",1,0) as major,
	
	ifThenElse(gc_type == "minor", ifThenElse(gc_duration is null , 0L, gc_duration), 0L) as minor_gc_duration, 
	ifThenElse(gc_type == "major", ifThenElse(gc_duration is null , 0L, gc_duration), 0L) as major_gc_duration,
	
	young_gen_cleared,
	
	old_gen_cleared,
	old_clearing_rate,
	old_growing_rate_with_time,
	old_growing_rate_with_free,
	old_growing_with_free_plus_time,
	old_free
	
insert into GCValidatedStream;

--process garbage collection data to take a summery for collecting period(default 1 sec)
from GCValidatedStream#window.externalTimeBatch(time_stamp, 1 sec, time_stamp, 1 sec)
select
	
	app_id,
	
	--time parameters
	max(time_stamp) as time_stamp,
	sum(minor_gc_duration) as total_minor_duration,
	sum(major_gc_duration) as total_major_duration,
	avg(minor_gc_duration) as avg_minor_duration,
	avg(major_gc_duration) as avg_major_duration,

	--take count major and minor gc frequencies 
	sum(minor) as minor_freq,
	sum(major) as major_freq,
	
	--take summeries of memory parameters
		
	sum(old_clearing_rate) as total_old_clearing_rate, --can exceed 1 (need further normalization)
	sum(old_growing_rate_with_time) as total_old_growing_rate_with_time, --can exceed 1 (need further normalization)
	
	avg(old_growing_rate_with_free) as avg_old_growing_rate_with_free, 
	avg(old_growing_with_free_plus_time) as avg_old_growing_with_free_plus_time,
	
	avg(young_gen_cleared) as avg_young_gen_cleared,
	avg(old_gen_cleared) as avg_old_gen_cleared,
	old_free
	
  	group by app_id
	
insert into GCBatchProcessedStream;
--==========================================================================================================--
--////////////////////////////////// END OF PROCESSING GC EVENTS DATA //////////////////////////////////////--
--==========================================================================================================--

--==========================================================================================================--
--//////////////////////////////////// PROCESS MEMORY USAGE DATA ///////////////////////////////////////////--
--==========================================================================================================--
from MemoryUsageStream
select 
	time_stamp,
	app_id,
	ifThenElse(max_heap >= used_heap, max_heap-used_heap, 0L) as free_heap,
	used_heap,
	max_heap
insert into PreProcessedMemoryStream;

partition with (app_id of PreProcessedMemoryStream)
begin
	from every m1 = PreProcessedMemoryStream, m2 = PreProcessedMemoryStream
		select 
			m2.time_stamp,
			m2.app_id,
			ifThenElse(m2.max_heap > 0, convert(m2.free_heap , 'double')/m2.max_heap , 0.0) as heap_free,
			ifThenElse(m2.used_heap > m1.used_heap, convert(m2.used_heap - m1.used_heap, 'double')/m1.free_heap, 0.0) as heap_growing_rate,
			ifThenElse(m2.free_heap > 0 and m2.max_heap > 0 , (convert(m2.used_heap, 'double')/m2.free_heap)/m2.max_heap , 1.0) as heap_used_free_proportion
	insert into MemoryProcessedStream;
end;
	
--process memory usage into summery using 3 seconds values
from MemoryProcessedStream#window.time(3 sec)
select 
	time_stamp,
	app_id,	
			   
	heap_free,
	heap_growing_rate,
	heap_used_free_proportion,
			   
	avg(heap_free) as heap_avg_3sec,
	stddev(heap_free) as heap_std_3sec,

	avg(heap_growing_rate) as heap_growing_rate_avg_3sec,
	stddev(heap_growing_rate) as heap_growing_rate_std_3sec,
					   
	avg(heap_used_free_proportion) as heap_used_free_proportion_avg_3sec,
	stddev(heap_used_free_proportion) as heap_used_free_proportion_std_3sec
			   
	group by app_id
insert into ThreeSecMemorySummery;

--process memory usage into summery using 5 seconds values
from ThreeSecMemorySummery#window.time(5 sec)
select 
	time_stamp,
	app_id,			   
			   
	heap_free,
	heap_growing_rate,
	heap_used_free_proportion,
			   
	heap_avg_3sec,
	heap_std_3sec,

	heap_growing_rate_avg_3sec,
	heap_growing_rate_std_3sec,
					   
	heap_used_free_proportion_avg_3sec,
	heap_used_free_proportion_std_3sec,

	avg(heap_free) as heap_avg_5sec,
	stddev(heap_free) as heap_std_5sec,

	avg(heap_growing_rate) as heap_growing_rate_avg_5sec,
	stddev(heap_growing_rate) as heap_growing_rate_std_5sec,
					   
	avg(heap_used_free_proportion) as heap_used_free_proportion_avg_5sec,
	stddev(heap_used_free_proportion) as heap_used_free_proportion_std_5sec,
	
	(max(heap_free) - min(heap_free)) as heap_range_5sec
	
	group by app_id
insert into FiveSecMemorySummery;
			   
--process memory usage into summery using 10 seconds values
from FiveSecMemorySummery#window.time(10 sec)
select 
	time_stamp,
	app_id,			   
		   
	heap_free,
	heap_growing_rate,
	heap_used_free_proportion,
			   
	heap_avg_3sec,
	heap_std_3sec,

	heap_growing_rate_avg_3sec,
	heap_growing_rate_std_3sec,
					   
	heap_used_free_proportion_avg_3sec,
	heap_used_free_proportion_std_3sec,

	heap_avg_5sec,
	heap_std_5sec,

	heap_growing_rate_avg_5sec,
	heap_growing_rate_std_5sec,
					   
	heap_used_free_proportion_avg_5sec,
	heap_used_free_proportion_std_5sec,
	
	heap_range_5sec,
	
	avg(heap_free) as heap_avg_10sec,
	stddev(heap_free) as heap_std_10sec,

	avg(heap_growing_rate) as heap_growing_rate_avg_10sec,
	stddev(heap_growing_rate) as heap_growing_rate_std_10sec,
					   
	avg(heap_used_free_proportion) as heap_used_free_proportion_avg_10sec,
	stddev(heap_used_free_proportion) as heap_used_free_proportion_std_10sec
	
	group by app_id
insert into TenSecMemorySummery;
			   
--process memory usage into summery using 30 seconds values
from TenSecMemorySummery#window.time(30 sec)
select 
	time_stamp,
	app_id,			   
		   
	heap_free,
	heap_growing_rate,
	heap_used_free_proportion,
			   
	heap_avg_3sec,
	heap_std_3sec,

	heap_growing_rate_avg_3sec,
	heap_growing_rate_std_3sec,
					   
	heap_used_free_proportion_avg_3sec,
	heap_used_free_proportion_std_3sec,

	heap_avg_5sec,
	heap_std_5sec,

	heap_growing_rate_avg_5sec,
	heap_growing_rate_std_5sec,
					   
	heap_used_free_proportion_avg_5sec,
	heap_used_free_proportion_std_5sec,
	
	heap_range_5sec,
	
	heap_avg_10sec,
	heap_std_10sec,

	heap_growing_rate_avg_10sec,
	heap_growing_rate_std_10sec,
					   
	heap_used_free_proportion_avg_10sec,
	heap_used_free_proportion_std_10sec,  
	
	avg(heap_free) as heap_avg_30sec,
	stddev(heap_free) as heap_std_30sec,

	avg(heap_growing_rate) as heap_growing_rate_avg_30sec,
	stddev(heap_growing_rate) as heap_growing_rate_std_30sec,
					   
	avg(heap_used_free_proportion) as heap_used_free_proportion_avg_30sec,
	stddev(heap_used_free_proportion) as heap_used_free_proportion_std_30sec
	
	group by app_id
insert into ProcessedMemoryUsageStream;

--==========================================================================================================--
--/////////////////////////////////// END OF PROCESS MEMORY USAGE DATA /////////////////////////////////////--
--==========================================================================================================--

--==========================================================================================================--
--/////////////////////////////////////// PROCESS CPU USAGE DATA ///////////////////////////////////////////--
--==========================================================================================================--
--process cpu usage into 5sec summery 
from CPUUsageStream#window.time(5 sec)
select 
	time_stamp,
	app_id,
	
	process_cpu_load,
	system_cpu_load,
	avg(process_cpu_load) as process_cpu_avg_5sec,
	stddev(process_cpu_load) as process_cpu_std_5sec
	
	group by app_id
insert into FiveSecCPUSummery;

--process cpu usage into 10sec summery 
from FiveSecCPUSummery#window.time(10 sec)
select 
	time_stamp,
	app_id,
	
	process_cpu_load,
	system_cpu_load,
	
	process_cpu_avg_5sec,
	process_cpu_std_5sec,
	
	avg(process_cpu_load) as process_cpu_avg_10sec,
	stddev(process_cpu_load) as process_cpu_std_10sec
	
	group by app_id
insert into TenSecCPUSummery;

--process cpu usage into 30sec summery 
from TenSecCPUSummery#window.time(30 sec)
select 
	time_stamp,
	app_id,
	
	process_cpu_load,
	system_cpu_load,
	
	process_cpu_avg_5sec,
	process_cpu_std_5sec,
	
	process_cpu_avg_10sec,
	process_cpu_std_10sec,

	avg(process_cpu_load) as process_cpu_avg_30sec,
	stddev(process_cpu_load) as process_cpu_std_30sec
	
	group by app_id
insert into ProcessedCPUUsageStream;

--==========================================================================================================--
--////////////////////////////////// END OF PROCESSING CPU USAGE DATA //////////////////////////////////////--
--==========================================================================================================--

--==========================================================================================================--
--////////////////////////////////// JOINING ALL USAGE DATA(EXCLUDED GC) ///////////////////////////////////--
--==========================================================================================================--
from ProcessedMemoryUsageStream#window.length (1) as M join ProcessedCPUUsageStream#window.length(1) as C on (C.app_id == M.app_id and C.time_stamp == M.time_stamp)
select
	M.time_stamp,
	M.app_id,
	
	M.heap_free,
	M.heap_growing_rate,
	M.heap_used_free_proportion,
	M.heap_range_5sec,
	
	M.heap_avg_3sec,
	M.heap_avg_5sec,
	M.heap_avg_10sec,
	M.heap_avg_30sec,
	
	M.heap_std_3sec,
	M.heap_std_5sec,
	M.heap_std_10sec,
	M.heap_std_30sec,
	
	M.heap_growing_rate_avg_3sec,
	M.heap_growing_rate_avg_5sec,
	M.heap_growing_rate_avg_10sec,
	M.heap_growing_rate_avg_30sec,
	
	M.heap_growing_rate_std_3sec,
	M.heap_growing_rate_std_5sec,
	M.heap_growing_rate_std_10sec,
	M.heap_growing_rate_std_30sec,
	
	M.heap_used_free_proportion_avg_3sec,
	M.heap_used_free_proportion_avg_5sec,
	M.heap_used_free_proportion_avg_10sec,
	M.heap_used_free_proportion_avg_30sec,
	
	M.heap_used_free_proportion_std_3sec,
	M.heap_used_free_proportion_std_5sec,
	M.heap_used_free_proportion_std_10sec,
	M.heap_used_free_proportion_std_30sec,
	
	C.process_cpu_load,
	C.system_cpu_load,
	
	C.process_cpu_avg_5sec,
	C.process_cpu_avg_10sec,
	C.process_cpu_avg_30sec,
	
	C.process_cpu_std_5sec,
	C.process_cpu_std_10sec,
	C.process_cpu_std_30sec

insert into UsageFeatureStream;
--==========================================================================================================--
--/////////////////////////////////////// END OF JOINING USAGE DATA ////////////////////////////////////////--
--==========================================================================================================--	

--==========================================================================================================--
--/////////////////////////////////// JOINING ALL USAGE DATA (INCLUDED GC) /////////////////////////////////--
--==========================================================================================================--
from GCBatchProcessedStream#window.time(5 sec)
select *
insert expired events into GCDelayedStream;

--join the common usage data to GC processed data
from   UsageFeatureStream#window.length(20) as U full outer join GCDelayedStream#window.length(10)  as G on ( U.time_stamp-1000 <= G.time_stamp and U.time_stamp >= G.time_stamp and U.app_id == G.app_id)
select 

	-------------General details----------------
	coalesce(U.time_stamp , G.time_stamp) as time_stamp,
	coalesce(U.app_id , G.app_id) as app_id,
	
	----------------Memory usages----------------
	U.heap_free,
	U.heap_growing_rate,
	U.heap_used_free_proportion,
	U.heap_range_5sec,
	
	U.heap_avg_3sec,
	U.heap_avg_5sec,
	U.heap_avg_10sec,
	U.heap_avg_30sec,
	
	U.heap_std_3sec,
	U.heap_std_5sec,
	U.heap_std_10sec,
	U.heap_std_30sec,
	
	U.heap_growing_rate_avg_3sec,
	U.heap_growing_rate_avg_5sec,
	U.heap_growing_rate_avg_10sec,
	U.heap_growing_rate_avg_30sec,
	
	U.heap_growing_rate_std_3sec,
	U.heap_growing_rate_std_5sec,
	U.heap_growing_rate_std_10sec,
	U.heap_growing_rate_std_30sec,
	
	U.heap_used_free_proportion_avg_3sec,
	U.heap_used_free_proportion_avg_5sec,
	U.heap_used_free_proportion_avg_10sec,
	U.heap_used_free_proportion_avg_30sec,
	
	U.heap_used_free_proportion_std_3sec,
	U.heap_used_free_proportion_std_5sec,
	U.heap_used_free_proportion_std_10sec,
	U.heap_used_free_proportion_std_30sec,
	
	
	----------------CPU usages-------------------
	U.process_cpu_load,
	U.system_cpu_load,
	
	U.process_cpu_avg_5sec,
	U.process_cpu_avg_10sec,
	U.process_cpu_avg_30sec,
	
	U.process_cpu_std_5sec,
	U.process_cpu_std_10sec,
	U.process_cpu_std_30sec,

	------------------GC logs--------------------
	--GC frequencies 
	G.major_freq,
	G.minor_freq,

	--GC duration parameters
	G.total_minor_duration,
	G.total_major_duration,
	G.avg_minor_duration,
	G.avg_major_duration,

	--summeries of GC memory parameters
	G.total_old_clearing_rate,
	G.total_old_growing_rate_with_time,
	
	G.avg_old_growing_rate_with_free,
	G.avg_old_growing_with_free_plus_time,
	
	G.avg_young_gen_cleared,
	G.avg_old_gen_cleared,
	G.old_free
	
insert into JoinedFeatureStream;

--==========================================================================================================--
--//////////////////////////////////// END OF JOINING ALL USAGE DATA ///////////////////////////////////////--
--==========================================================================================================--

from JoinedFeatureStream[not(old_free is null)]
select time_stamp, app_id, old_free
insert overwrite GCCache
	on GCCache.app_id == app_id;

--==========================================================================================================--
--////////////////////////////////////////// OUTPUT MODIFIED ///////////////////////////////////////////////--
--==========================================================================================================--
from JoinedFeatureStream as J unidirectional left outer join GCCache as G on J.app_id == G.app_id
select 

	J.app_id,
	J.time_stamp,
	
	--validate memory
	ifThenElse(heap_free is null , '?', convert(heap_free, 'string')) as heap_free, 
	ifThenElse(heap_growing_rate is null , '?', convert(heap_growing_rate, 'string')) as heap_growing_rate, 
	ifThenElse(heap_used_free_proportion is null , '?', convert(heap_used_free_proportion, 'string')) as heap_used_free_proportion, 
	ifThenElse(heap_range_5sec is null , '?', convert(heap_range_5sec, 'string')) as heap_range_5sec,

	ifThenElse(heap_avg_3sec is null , '?', convert(heap_avg_3sec, 'string')) as heap_avg_3sec,
	ifThenElse(heap_avg_5sec is null , '?', convert(heap_avg_5sec, 'string')) as heap_avg_5sec,
	ifThenElse(heap_avg_10sec is null , '?', convert(heap_avg_10sec, 'string')) as heap_avg_10sec,
	ifThenElse(heap_avg_30sec is null , '?', convert(heap_avg_30sec, 'string')) as heap_avg_30sec,

	ifThenElse(heap_std_3sec is null , '?', convert(heap_std_3sec, 'string')) as heap_std_3sec,
	ifThenElse(heap_std_5sec is null , '?', convert(heap_std_5sec, 'string')) as heap_std_5sec,
	ifThenElse(heap_std_10sec is null , '?', convert(heap_std_10sec, 'string')) as heap_std_10sec,
	ifThenElse(heap_std_30sec is null , '?', convert(heap_std_30sec, 'string')) as heap_std_30sec,

	ifThenElse(heap_growing_rate_avg_3sec is null , '?', convert(heap_growing_rate_avg_3sec, 'string')) as heap_growing_rate_avg_3sec,
	ifThenElse(heap_growing_rate_avg_5sec is null , '?', convert(heap_growing_rate_avg_5sec, 'string')) as heap_growing_rate_avg_5sec,
	ifThenElse(heap_growing_rate_avg_10sec is null , '?', convert(heap_growing_rate_avg_10sec, 'string')) as heap_growing_rate_avg_10sec,
	ifThenElse(heap_growing_rate_avg_30sec is null , '?', convert(heap_growing_rate_avg_30sec, 'string')) as heap_growing_rate_avg_30sec,

	ifThenElse(heap_growing_rate_std_3sec is null , '?', convert(heap_growing_rate_std_3sec, 'string')) as heap_growing_rate_std_3sec,
	ifThenElse(heap_growing_rate_std_5sec is null , '?', convert(heap_growing_rate_std_5sec, 'string')) as heap_growing_rate_std_5sec,
	ifThenElse(heap_growing_rate_std_10sec is null , '?', convert(heap_growing_rate_std_10sec, 'string')) as heap_growing_rate_std_10sec,
	ifThenElse(heap_growing_rate_std_30sec is null , '?', convert(heap_growing_rate_std_30sec, 'string')) as heap_growing_rate_std_30sec,

	ifThenElse(heap_used_free_proportion_avg_3sec is null , '?', convert(heap_used_free_proportion_avg_3sec, 'string')) as heap_used_free_proportion_avg_3sec,
	ifThenElse(heap_used_free_proportion_avg_5sec is null , '?', convert(heap_used_free_proportion_avg_5sec, 'string')) as heap_used_free_proportion_avg_5sec,
	ifThenElse(heap_used_free_proportion_avg_10sec is null , '?', convert(heap_used_free_proportion_avg_10sec, 'string')) as heap_used_free_proportion_avg_10sec,
	ifThenElse(heap_used_free_proportion_avg_30sec is null , '?', convert(heap_used_free_proportion_avg_30sec, 'string')) as heap_used_free_proportion_avg_30sec,

	ifThenElse(heap_used_free_proportion_std_3sec is null , '?', convert(heap_used_free_proportion_std_3sec, 'string')) as heap_used_free_proportion_std_3sec,
	ifThenElse(heap_used_free_proportion_std_5sec is null , '?', convert(heap_used_free_proportion_std_5sec, 'string')) as heap_used_free_proportion_std_5sec,
	ifThenElse(heap_used_free_proportion_std_10sec is null , '?', convert(heap_used_free_proportion_std_10sec, 'string')) as heap_used_free_proportion_std_10sec,
	ifThenElse(heap_used_free_proportion_std_30sec is null , '?', convert(heap_used_free_proportion_std_30sec, 'string')) as heap_used_free_proportion_std_30sec,

	--validate CPU
	ifThenElse(process_cpu_load is null, '?', convert(process_cpu_load, 'string')) as process_cpu_load,
	ifThenElse(system_cpu_load is null, '?', convert(system_cpu_load, 'string')) as system_cpu_load,

	ifThenElse(process_cpu_avg_5sec is null, '?', convert(process_cpu_avg_5sec, 'string')) as process_cpu_avg_5sec,
	ifThenElse(process_cpu_avg_10sec is null, '?', convert(process_cpu_avg_10sec, 'string')) as process_cpu_avg_10sec,
	ifThenElse(process_cpu_avg_30sec is null, '?', convert(process_cpu_avg_30sec, 'string')) as process_cpu_avg_30sec,

	ifThenElse(process_cpu_std_5sec is null, '?', convert(process_cpu_std_5sec, 'string')) as process_cpu_std_5sec,
	ifThenElse(process_cpu_std_10sec is null, '?', convert(process_cpu_std_10sec, 'string')) as process_cpu_std_10sec,
	ifThenElse(process_cpu_std_30sec is null, '?', convert(process_cpu_std_30sec, 'string')) as process_cpu_std_30sec,
	
	
	--normalize gc frequencies
	ifThenElse( minor_freq is null , 0.0, ifThenElse( minor_freq > 0 , 1.0, 0.0)) as minor_freq,
	ifThenElse( major_freq is null , 0.0 , ifThenElse( major_freq > 0 , 1.0, 0.0)) as major_freq,

	--normalize GC durations
	ifThenElse( not(total_minor_duration is null) and total_minor_duration > 0 , ifThenElse(total_minor_duration<1000 , convert(total_minor_duration, 'double')/1000 , 1.0), 0.0 )as total_minor_duration, --maximum minor gc durations is taken as 1000
	ifThenElse( not(total_major_duration is null) and total_major_duration > 0 , ifThenElse(total_major_duration<10000 , convert(total_major_duration, 'double')/10000 , 1.0), 0.0 )as total_major_duration, --maximum major gc durations is taken as 10000
	ifThenElse( not(avg_minor_duration is null) and avg_minor_duration > 0 , ifThenElse(avg_minor_duration<500 , avg_minor_duration/500 , 1.0), 0.0 )as avg_minor_duration, --maximum minor gc durations is taken as 500
	ifThenElse( not(avg_major_duration is null) and avg_major_duration > 0 , ifThenElse(avg_major_duration<5000 , avg_major_duration/5000 , 1.0), 0.0 )as avg_major_duration, --maximum major gc durations is taken as 5000

	--validate GC memory parameters
	ifThenElse(total_old_clearing_rate is null , 0.0 , total_old_clearing_rate) as total_old_clearing_rate, 
	ifThenElse(total_old_growing_rate_with_time is null , 0.0 , total_old_growing_rate_with_time) as total_old_growing_rate_with_time, 
	ifThenElse(avg_old_growing_rate_with_free is null , 0.0 , avg_old_growing_rate_with_free) as avg_old_growing_rate_with_free, 
	ifThenElse(avg_old_growing_with_free_plus_time is null , 0.0 , avg_old_growing_with_free_plus_time) as avg_old_growing_with_free_plus_time, 

	
	ifThenElse(avg_young_gen_cleared is null, 0.0, avg_young_gen_cleared) as young_gen_cleared, 
	ifThenElse(avg_old_gen_cleared is null, 0.0, avg_old_gen_cleared) as old_gen_cleared, 
	coalesce(J.old_free, G.old_free, 0.0) as old_free	

insert into IterationThreeProcessedUsageStream;
--==========================================================================================================--
--//////////////////////////////////////////// END OF OUTPUT ///////////////////////////////////////////////--
--==========================================================================================================--
