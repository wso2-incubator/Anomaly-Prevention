@Plan:name('FeaturesSet3')

@Plan:description('Execution plan for features process')

@Plan:trace('true')
@Plan:statistics('true')

--===================================================== Imports ======================================================--
@Import('MemoryUsageStream:1.0.0')
define stream MemoryUsageStream (time_stamp long, app_id string, max_heap long, allocated_heap long, 
								 used_heap long, max_non_heap long, allocated_non_heap long, used_non_heap long,
								 pending_finalizations long);

@Import('GarbageCollectionStream:1.0.0')
define stream GarbageCollectionStream (time_stamp long, app_id string, gc_type string, gc_cause string, 
									   gc_duration long, eden_used_after long, eden_used_before long, 
									   survivor_used_after long, survivor_used_before long, old_used_after long, 
									   old_used_before long, eden_committed_after long, eden_committed_before long, 
									   survivor_committed_after long, survivor_committed_before long, 
									   old_committed_after long, old_committed_before long, eden_max_after long, 
									   eden_max_before long, survivor_max_after long, survivor_max_before long,
									   old_max_after long, old_max_before long);				 
--================================================= End of Imports ===================================================--

--===================================================== Exports ======================================================--
@Export('FeaturesWithoutValidation:1.0.0')
define stream FeaturesWithoutValidation (mc_time_stamp long, 
										app_id string,										 
										gc_duration double,
										eden_used_after double,
										eden_used_before double,
										survivor_used_after double,
										survivor_used_before double,
										old_used_after double,
										old_used_before double,
										used_heap double,
										allocated_heap double,
										max_heap double,
										sd_gc_frequency double,
										dif_eden_used double,
										dif_old_used double,
										dif_survivor_used double,
										sd_ratio_survivor double,
										gc_frequency double);
--================================================= End of Exports ===================================================--


--=========================================== Process Garbage Collection =============================================--
define stream GarbageCollectionStreamNew (time_stamp long, app_id string, gc_type string, gc_cause string, 
										  gc_duration double, eden_used_after double, eden_used_before double, 
										  survivor_used_after double, survivor_used_before double, 
										  old_used_after double, old_used_before double, 									   
										  eden_committed_after double, eden_committed_before double, 
										  survivor_committed_after double, survivor_committed_before double, 
										  old_committed_after double, old_committed_before double, 
										  eden_max_after double, eden_max_before double, 
										  survivor_max_after double, survivor_max_before double,									   
										  old_max_after double, old_max_before double);
									   
@IndexBy('app_id')					 
define table gc_stac_table (time_stamp long, 
							app_id string,
							x_ratio_survivor double, 
							xx_ratio_survivor double,
							n int);

define stream GCFeatures (time_stamp long, 
						  app_id string,
						  gc_duration double,
						  eden_used_after double,
  						  eden_used_before double,
  						  survivor_used_after double,
  						  survivor_used_before double,
  						  old_used_after double,
  						  old_used_before double,
						  
						  sd_gc_frequency double,
						  dif_eden_used double, 
						  dif_old_used double,
						  sd_ratio_survivor double,
						  dif_survivor_used double,
						  gc_frequency double);
						  
from GarbageCollectionStream
select
	time_stamp, 
	app_id, 
	gc_type, 
	gc_cause,
	convert(gc_duration, 'double') as gc_duration,
	convert(eden_used_after, 'double') as eden_used_after,
	convert(eden_used_before, 'double') as eden_used_before,
	convert(survivor_used_after, 'double') as survivor_used_after,
	convert(survivor_used_before, 'double') as survivor_used_before,
	convert(old_used_after, 'double') as old_used_after,
	convert(old_used_before, 'double') as old_used_before,
	convert(eden_committed_after, 'double') as eden_committed_after,
	convert(eden_committed_before, 'double') as eden_committed_before,
	convert(survivor_committed_after, 'double') as survivor_committed_after,
	convert(survivor_committed_before, 'double') as survivor_committed_before,
	convert(old_committed_after, 'double') as old_committed_after,
	convert(old_committed_before, 'double') as old_committed_before,
	convert(eden_max_after, 'double') as eden_max_after,
	convert(eden_max_before, 'double') as eden_max_before,
	convert(survivor_max_after, 'double') as survivor_max_after,
	convert(survivor_max_before, 'double') as survivor_max_before,
	convert(old_max_after, 'double') as old_max_after,
	convert(old_max_before, 'double') as old_max_before
insert into GarbageCollectionStreamNew;

--- GC Usage ---
from GarbageCollectionStreamNew#window.length(1) as gc left outer join gc_stac_table as stac on (gc.app_id==stac.app_id)
select
	gc.time_stamp,
	gc.app_id,	
	--X & XX
	statistic:x((gc.survivor_max_after-gc.survivor_max_before)/gc.survivor_max_before, stac.x_ratio_survivor) as x_ratio_survivor,
	statistic:xx((gc.survivor_max_after-gc.survivor_max_before)/gc.survivor_max_before, stac.xx_ratio_survivor) as xx_ratio_survivor,
	coalesce(stac.n, 0) + 1 as n
insert into gc_stac_table;

--Add a delay to wait GCUsageStream until the gc stac is processed
from GarbageCollectionStreamNew#window.time(100)
insert expired events into GarbageCollectionStreamExpired;

from GarbageCollectionStreamExpired#window.time(3 min) as gc left outer join gc_stac_table as stac on (gc.app_id==stac.app_id)
select
	gc.time_stamp,
	gc.app_id,
	gc.gc_duration,
	gc.eden_used_after,
	gc.eden_used_before,
	gc.survivor_used_after,
	gc.survivor_used_before,
	gc.old_used_after,
	gc.old_used_before,	
	stddev( distinctcount(gc.time_stamp) ) as sd_gc_frequency,
	(gc.eden_used_before-gc.eden_used_after)/gc.eden_used_before as dif_eden_used, 
	(gc.old_used_after-gc.old_used_before)/gc.old_used_before as dif_old_used, 
	statistic:sd(stac.x_ratio_survivor, stac.xx_ratio_survivor, stac.n) as sd_ratio_survivor,
	(gc.survivor_used_after-gc.survivor_used_before)/gc.survivor_used_before as dif_survivor_used,
	distinctcount(gc.time_stamp) as gc_frequency
	
	group by gc.app_id
insert into GCFeaturesTem;

from GCFeaturesTem#window.timeBatch(1000)
select
	time_stamp,
	app_id,
	avg( ifThenElse(gc_duration is null, 0d, ifThenElse(math:isNan(gc_duration), 0d, gc_duration)) ) as gc_duration,
	avg( ifThenElse(eden_used_after is null, 0d, ifThenElse(math:isNan(eden_used_after), 0d, eden_used_after)) ) as eden_used_after,
	avg( ifThenElse(eden_used_before is null, 0d, ifThenElse(math:isNan(eden_used_before), 0d, eden_used_before)) ) as eden_used_before,
	avg( ifThenElse(survivor_used_after is null, 0d, ifThenElse(math:isNan(survivor_used_after), 0d, survivor_used_after)) ) as survivor_used_after,
	avg( ifThenElse(survivor_used_before is null, 0d, ifThenElse(math:isNan(survivor_used_before), 0d, survivor_used_before)) ) as survivor_used_before,
	avg( ifThenElse(old_used_after is null, 0d, ifThenElse(math:isNan(old_used_after), 0d, old_used_after)) ) as old_used_after,
	avg( ifThenElse(old_used_before is null, 0d, ifThenElse(math:isNan(old_used_before), 0d, old_used_before)) ) as old_used_before,
	avg( ifThenElse(sd_gc_frequency is null, 0d, ifThenElse(math:isNan(sd_gc_frequency), 0d, sd_gc_frequency)) ) as sd_gc_frequency,
	avg( ifThenElse(dif_eden_used is null, 0d, ifThenElse(math:isNan(dif_eden_used), 0d, dif_eden_used)) ) as dif_eden_used,
	avg( ifThenElse(dif_old_used is null, 0d, ifThenElse(math:isNan(dif_old_used), 0d, dif_old_used)) ) as dif_old_used,
	avg( ifThenElse(sd_ratio_survivor is null, 0d, ifThenElse(math:isNan(sd_ratio_survivor), 0d, sd_ratio_survivor)) ) as sd_ratio_survivor,
	avg( ifThenElse(dif_survivor_used is null, 0d, ifThenElse(math:isNan(dif_survivor_used), 0d, dif_survivor_used)) ) as dif_survivor_used,
	avg( ifThenElse(gc_frequency is null, 0l, gc_frequency) ) as gc_frequency
	
	group by app_id
insert into GCFeatures;
--======================================= End of Process Garbage Collection ==========================================--


--join the Memory data to GC processed data
from  MemoryUsageStream#window.length(10) as m unidirectional left outer join GCFeatures#window.timeLength(5 sec , 5)  as gc on ( m.time_stamp-1000 <= gc.time_stamp and m.time_stamp >= gc.time_stamp and m.app_id == gc.app_id)
select
	m.time_stamp as mc_time_stamp,
	m.app_id,
	
	gc.gc_duration,
	gc.eden_used_after,
	gc.eden_used_before,
	gc.survivor_used_after,
	gc.survivor_used_before,
	gc.old_used_after,
	gc.old_used_before,
	cast(m.used_heap, 'double') as used_heap,
	cast(m.allocated_heap, 'double') as allocated_heap,
	cast(m.max_heap, 'double') as max_heap,
	gc.sd_gc_frequency,
	gc.dif_eden_used,
	gc.dif_old_used,
	gc.dif_survivor_used,
	gc.sd_ratio_survivor,
	gc.gc_frequency
insert into FeaturesWithoutValidation;