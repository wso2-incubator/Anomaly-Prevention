@Plan:name('CPUFeatures')

@Plan:trace('true')

@Plan:statistics('true')

define trigger StacTableTrigger at every 4 min ;

--- Define CPU ---
@Import('CPUUsageStream:1.0.0')
define stream CPUUsageStream (time_stamp long, app_id string, process_cpu_load double, system_cpu_load double);

@IndexBy('app_id')
define table cpu_stac_table (time_stamp long, app_id string, 
							 x_process_cpu_load double, xx_process_cpu_load double,
							 x_system_cpu_load double, xx_system_cpu_load double,
							 
							 min_process_cpu_load double, max_process_cpu_load double,
							 min_system_cpu_load double, max_system_cpu_load double,
							 
							 n int);

@Export('CPUFeatures:1.0.0')
define stream CPUFeatures (time_stamp long, app_id string,
						   
						   process_cpu_load double,
						   system_cpu_load double,
						   
						   sd_process_cpu_load double,
						   sd_system_cpu_load double,
						   
						   z_process_cpu_load double,
						   z_system_cpu_load double,
						  
						   p_process_cpu_load double,
						   p_system_cpu_load double);



from StacTableTrigger 
delete cpu_stac_table on true;

--- CPU Usage ---
from CPUUsageStream#window.length(1) as cpu left outer join cpu_stac_table as stac on (cpu.app_id==stac.app_id)
select
	cpu.time_stamp,
	cpu.app_id,
	
	statistic:x(cpu.process_cpu_load , stac.x_process_cpu_load) as x_process_cpu_load,
	statistic:xx(cpu.process_cpu_load , stac.xx_process_cpu_load) as xx_process_cpu_load,
	
	statistic:x(cpu.system_cpu_load , stac.x_system_cpu_load) as x_system_cpu_load,
	statistic:xx(cpu.system_cpu_load , stac.xx_system_cpu_load) as xx_system_cpu_load,
	
	ifThenElse(stac.min_process_cpu_load is null, cpu.process_cpu_load, ifThenElse(stac.min_process_cpu_load > cpu.process_cpu_load, cpu.process_cpu_load, stac.min_process_cpu_load)) as min_process_cpu_load,
	ifThenElse(stac.max_process_cpu_load is null, cpu.process_cpu_load, ifThenElse(stac.max_process_cpu_load < cpu.process_cpu_load, cpu.process_cpu_load, stac.max_process_cpu_load)) as max_process_cpu_load,
	
	ifThenElse(stac.min_system_cpu_load is null, cpu.system_cpu_load, ifThenElse(stac.min_system_cpu_load > cpu.system_cpu_load, cpu.system_cpu_load, stac.min_system_cpu_load)) as min_system_cpu_load,
	ifThenElse(stac.max_system_cpu_load is null, cpu.system_cpu_load, ifThenElse(stac.max_system_cpu_load < cpu.system_cpu_load, cpu.system_cpu_load, stac.max_system_cpu_load)) as max_system_cpu_load,
	
	coalesce(stac.n, 0) + 1 as n	
insert into cpu_stac_table;

--Add a delay to wait CPUUsageStream until the cpu stac is processed
from CPUUsageStream#window.time(100)
insert expired events into CPUUsageStreamExpired;

from CPUUsageStreamExpired#window.time(3 min) as cpu left outer join cpu_stac_table as stac on (cpu.app_id==stac.app_id)
select
	cpu.time_stamp,
	cpu.app_id,
	
	cpu.process_cpu_load,
	cpu.system_cpu_load,
						   
	statistic:sd(stac.x_process_cpu_load, stac.xx_process_cpu_load, stac.n) as sd_process_cpu_load,
	statistic:sd(stac.x_system_cpu_load, stac.xx_system_cpu_load, stac.n) as sd_system_cpu_load,
						   
	statistic:z(cpu.process_cpu_load, stac.x_process_cpu_load, stac.xx_process_cpu_load, stac.n) as z_process_cpu_load,
	statistic:z(cpu.system_cpu_load, stac.x_system_cpu_load, stac.xx_system_cpu_load, stac.n) as z_system_cpu_load,
						  
	statistic:prob(min_process_cpu_load, max_process_cpu_load, 5, cpu.process_cpu_load) as p_process_cpu_load,
	statistic:prob(min_system_cpu_load, max_system_cpu_load, 5, cpu.system_cpu_load) as p_system_cpu_load
insert into CPUFeatures;