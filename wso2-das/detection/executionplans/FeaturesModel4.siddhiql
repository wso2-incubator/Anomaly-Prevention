@Plan:name('FeaturesModel4')

@Plan:statistics('true')

@Plan:trace('true')

define trigger PredictionResultTrigger at every 1 sec ;

@Import('FeaturesWithoutValidation:1.0.0')
define stream FeaturesWithoutValidation (mc_time_stamp long, app_id string, process_cpu_load double, 
										 system_cpu_load double, sd_process_cpu_load double, sd_system_cpu_load double, 
										 z_process_cpu_load double, z_system_cpu_load double, p_process_cpu_load double, 
										 p_system_cpu_load double, max_heap long, allocated_heap long, 
										 used_heap long, max_non_heap long, allocated_non_heap long, 
										 used_non_heap long, pending_finalizations long, sd_allocated_heap double, 
										 sd_used_heap double, sd_max_non_heap double, sd_allocated_non_heap double, 
										 sd_used_non_heap double, sd_pending_finalizations double, z_allocated_heap double, 
										 z_used_heap double, z_max_non_heap double, z_allocated_non_heap double, 
										 z_used_non_heap double, z_pending_finalizations double, p_allocated_heap double, 
										 p_used_heap double, p_max_non_heap double, p_allocated_non_heap double, 
										 p_used_non_heap double, p_pending_finalizations double, gc_time_stamp long, 
										 gc_duration double, eden_used_after double, eden_used_before double, 
										 survivor_used_after double, survivor_used_before double, old_used_after double, 
										 old_used_before double, eden_committed_after double, eden_committed_before double, 
										 survivor_committed_after double, survivor_committed_before double, old_committed_after double, 
										 old_committed_before double, eden_max_after double, eden_max_before double, 
										 survivor_max_after double, survivor_max_before double, old_max_after double, 
										 old_max_before double, dif_eden_used double, dif_old_used double, 
										 ratio_survivor double, dif_survivor_used double, sd_dif_eden_used double, 
										 sd_dif_old_used double, sd_ratio_survivor double, sd_dif_survivor_used double, 
										 sd_gc_duration double, sd_eden_used_after double, sd_eden_used_before double, 
										 sd_survivor_used_after double, sd_survivor_used_before double, sd_old_used_after double, 
										 sd_old_used_before double, sd_eden_committed_after double, sd_eden_committed_before double, 
										 sd_survivor_committed_after double, sd_survivor_committed_before double, sd_old_committed_after double, 
										 sd_old_committed_before double, sd_eden_max_after double, sd_eden_max_before double, 
										 sd_survivor_max_after double, sd_survivor_max_before double, sd_old_max_after double, 
										 sd_old_max_before double, z_dif_eden_used double, z_dif_old_used double, 
										 z_ratio_survivor double, z_dif_survivor_used double, z_gc_duration double, 
										 z_eden_used_after double, z_eden_used_before double, z_survivor_used_after double, 
										 z_survivor_used_before double, z_old_used_after double, z_old_used_before double, 
										 z_eden_committed_after double, z_eden_committed_before double, z_survivor_committed_after double, 
										 z_survivor_committed_before double, z_old_committed_after double, z_old_committed_before double, 
										 z_eden_max_after double, z_eden_max_before double, z_survivor_max_after double, 
										 z_survivor_max_before double, z_old_max_after double, z_old_max_before double, 
										 p_dif_eden_used double, p_dif_old_used double, p_ratio_survivor double, 
										 p_dif_survivor_used double, p_gc_duration double, p_eden_used_after double, 
										 p_eden_used_before double, p_survivor_used_after double, p_survivor_used_before double, 
										 p_old_used_after double, p_old_used_before double, p_eden_committed_after double, 
										 p_eden_committed_before double, p_survivor_committed_after double, p_survivor_committed_before double, 
										 p_old_committed_after double, p_old_committed_before double, p_eden_max_after double, 
										 p_eden_max_before double, p_survivor_max_after double, p_survivor_max_before double, 
										 p_old_max_after double, p_old_max_before double);



@Export('FeaturesModel4Stream:1.0.0')
define stream FeaturesModel4Stream (time_stamp long,
									app_id string,
									z_used_heap double,
									p_allocated_heap double,
									p_used_heap double,
									
									dif_eden_used double,
									dif_old_used double,
									ratio_survivor double,
									dif_survivor_used double,
									sd_dif_eden_used double,
									sd_dif_old_used double,
									sd_ratio_survivor double,
									sd_dif_survivor_used double,
									z_dif_eden_used double,
									z_dif_old_used double,
									z_ratio_survivor double,
									z_dif_survivor_used double,
									p_dif_eden_used double,
									p_dif_old_used double,
									p_ratio_survivor double,
									p_dif_survivor_used double);
																		

@Export('PredictionResultStream:1.0.0')
define stream PredictionResultStream (time_stamp long, app_id string, model_id string, prediction string);

@IndexBy('app_id')
define table PredictionResultStreamTable (time_stamp long, app_id string, model_id string, prediction string);


from FeaturesWithoutValidation#window.length(1)
select
	mc_time_stamp as time_stamp,
	app_id,
	ifThenElse(z_used_heap is null, 0d, z_used_heap) as z_used_heap,
	ifThenElse(p_allocated_heap is null, 0d, p_allocated_heap) as p_allocated_heap,
	ifThenElse(p_used_heap is null, 0d, p_used_heap) as p_used_heap,
	ifThenElse(dif_eden_used is null, 0d, dif_eden_used) as dif_eden_used,
	ifThenElse(dif_old_used is null, 0d, dif_old_used) as dif_old_used,
	ifThenElse(ratio_survivor is null, 0d, ratio_survivor) as ratio_survivor,
	ifThenElse(dif_survivor_used is null, 0d, dif_survivor_used) as dif_survivor_used,
	ifThenElse(sd_dif_eden_used is null, 0d, sd_dif_eden_used) as sd_dif_eden_used,
	ifThenElse(sd_dif_old_used is null, 0d, sd_dif_old_used) as sd_dif_old_used,
	ifThenElse(sd_ratio_survivor is null, 0d, sd_ratio_survivor) as sd_ratio_survivor,
	ifThenElse(sd_dif_survivor_used is null, 0d, sd_dif_survivor_used) as sd_dif_survivor_used,
	ifThenElse(z_dif_eden_used is null, 0d, z_dif_eden_used) as z_dif_eden_used,
	ifThenElse(z_dif_old_used is null, 0d, z_dif_old_used) as z_dif_old_used,
	ifThenElse(z_ratio_survivor is null, 0d, z_ratio_survivor) as z_ratio_survivor,
	ifThenElse(z_dif_survivor_used is null, 0d, z_dif_survivor_used) as z_dif_survivor_used,
	ifThenElse(p_dif_eden_used is null, 0d, p_dif_eden_used) as p_dif_eden_used,
	ifThenElse(p_dif_old_used is null, 0d, p_dif_old_used) as p_dif_old_used,
	ifThenElse(p_ratio_survivor is null, 0d, p_ratio_survivor) as p_ratio_survivor,
	ifThenElse(p_dif_survivor_used is null, 0d, p_dif_survivor_used) as p_dif_survivor_used
insert into FeaturesModel4Stream;

/*
from FeaturesModel4Stream#ml:predict('/home/buddhi/Documents/tem8b5/wso2das-3.1.0/models/pro8bm4a4nc5.Model.2016-11-22_09-26-03','string',98.0,
									 z_used_heap,
									 p_allocated_heap,
									 p_used_heap,
									 --dif_eden_used,
									 --dif_old_used,
									 --ratio_survivor,
									 --dif_survivor_used,
									 --sd_dif_eden_used,
									 --sd_dif_old_used,
									 sd_ratio_survivor,
									 --sd_dif_survivor_used,
									 z_dif_eden_used,
									 z_dif_old_used,
									 z_ratio_survivor,
									 z_dif_survivor_used
									 --p_dif_eden_used,
									 --p_dif_old_used,
									 --p_ratio_survivor,
									 --p_dif_survivor_used
									)
select 
	time_stamp,
	app_id,
	'model 1 >>>>>>>>' as model_id,
	ifThenElse(prediction == 'anomaly','anomaly >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' , prediction) as prediction
insert into PredictionResultStreamTem;

from PredictionResultTrigger join PredictionResultStreamTable#window.length(1)
select
	time_stamp+1000l as time_stamp,
	app_id,
	model_id,
	prediction
insert into PredictionResultStreamTable;

from PredictionResultStreamTem#window.time(100)
insert expired events into PredictionResultStreamTable;


from PredictionResultTrigger#window.time(100) join PredictionResultStreamTable#window.length(1)
select
	time_stamp,
	app_id,
	model_id,
	prediction
insert into PredictionResultStream;*/