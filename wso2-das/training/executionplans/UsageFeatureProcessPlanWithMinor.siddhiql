
@Plan:name('UsageFeatureProcessPlanWithMinor')

-- @Plan:description('ExecutionPlan')

@Plan:trace('true')
@Plan:statistics('true')

@Import('CPUUsageStream:1.0.0')
define stream CPUUsageStream (time_stamp long, app_id string, process_cpu_load double, system_cpu_load double);

@Import('MemoryUsageStream:1.0.0')
define stream MemoryUsageStream (time_stamp long, app_id string, 
								 max_heap long, allocated_heap long, used_heap long, 
								 max_non_heap long, allocated_non_heap long, used_non_heap long, 
								 pending_finalizations long
								);

@Import('GarbageCollectionStream:1.0.0')
define stream GarbageCollectionStream (time_stamp long, app_id string, gc_type string, gc_cause string, gc_duration long, 
									   eden_used_after long, eden_used_before long, survivor_used_after long, survivor_used_before long, old_used_after long, old_used_before long, 
									   eden_committed_after long, eden_committed_before long, survivor_committed_after long, survivor_committed_before long, old_committed_after long, old_committed_before long, 
									   eden_max_after long, eden_max_before long, survivor_max_after long, survivor_max_before long, old_max_after long, old_max_before long);


@Export('ProcessedUsageEventsStream:1.0.0')
define stream ProcessedUsageEventsStream (time_stamp long, app_id string, 
										  heap_used double, heap_allocated double, process_cpu_load double, system_cpu_load double, 
										  minor_gc_freq double, major_gc_freq double, 
										  eden_cleared double, eden_growing double, survivor_cleared double, survivor_growing double, old_cleared double, old_growing double,
										  eden_used double, survivor_used double, old_used double, 
										  eden_committed double, survivor_committed double, old_committed double, 
										  gc_duration double
										 );


@Export('ProcessedUsageOutputStreamWithMinor:1.0.0')
define stream ProcessedUsageOutputStreamWithMinor (app_id string, 
										  time_stamp_1 long, time_stamp_2 long, time_stamp_3 long, 
										  heap_used_1 double, heap_used_2 double, heap_used_3 double, 
										  heap_allocated_1 double, heap_allocated_2 double, heap_allocated_3 double, 
										  process_cpu_load_1 double, process_cpu_load_2 double, process_cpu_load_3 double, 
										  system_cpu_load_1 double, system_cpu_load_2 double, system_cpu_load_3 double, 
										  minor_gc_freq_1 double, minor_gc_freq_2 double, minor_gc_freq_3 double, 
										  major_gc_freq_1 double, major_gc_freq_2 double, major_gc_freq_3 double, 
										  gc_duration_1 double, gc_duration_2 double, gc_duration_3 double, 
										  eden_cleared double, eden_growing double, survivor_cleared double, survivor_growing double, old_cleared double, old_growing double, 
										  eden_used double, survivor_used double, old_used double, 
										  eden_committed double, survivor_committed double, old_committed double
										 );

/*process memory usage details into percentage values*/
from MemoryUsageStream
select 
	time_stamp, 
	app_id,
	ifThenElse(max_heap > 0 , convert(allocated_heap, 'double')/max_heap, 0.0) as heap_allocated,
	ifThenElse(allocated_heap > 0, convert(used_heap, 'double')/allocated_heap, 0.0) as heap_used
insert into ProcessedMemoryUsageStream;


/*join both Memory usage and CPU usage events using their generated times*/
from ProcessedMemoryUsageStream#window.length(1) as M join CPUUsageStream#window.length(1) as C on (M.time_stamp == C.time_stamp and M.app_id == C.app_id)
select 
	M.time_stamp, 
	M.app_id,
	M.heap_allocated , 
	M.heap_used , 
	C.process_cpu_load, 
	C.system_cpu_load
insert into UsageStream;


/*convert events attibute gc_type(major or minor) into to two attributes as major and minor*/
from GarbageCollectionStream
select 
	app_id,
	time_stamp,
	ifThenElse(gc_type is null, 0,ifThenElse( gc_type == "minor",1,0))as minor, 
	ifThenElse(gc_type is null , 0 ,ifThenElse(gc_type == "major",1,0)) as major,
	gc_cause, 
	ifThenElse(gc_duration is null , 0L, gc_duration) as gc_duration,
	ifThenElse(eden_used_after is null , 0L , eden_used_after) as eden_used_after,
	ifThenElse(eden_used_before is null ,0L , eden_used_before) as eden_used_before, 
	ifThenElse(survivor_used_after is null , 0L ,survivor_used_after) as survivor_used_after, 
	ifThenElse(survivor_used_before is null, 0L , survivor_used_before) as survivor_used_before, 
	ifThenElse(old_used_after is null , 0L , old_used_after) as old_used_after, 
	ifThenElse(old_used_before is null,0L, old_used_before) as old_used_before, 
	ifThenElse(eden_committed_after is null , 0L, eden_committed_after) as eden_committed_after, 
	ifThenElse(eden_committed_before is null,0L , eden_committed_before) as eden_committed_before,
	ifThenElse(survivor_committed_after is null,0L, survivor_committed_after) as survivor_committed_after,
	ifThenElse(survivor_committed_before is null, 0L , survivor_committed_before) as survivor_committed_before,
	ifThenElse(old_committed_after is null,0L, old_committed_after) as old_committed_after,
	ifThenElse(old_committed_before is null,0L , old_committed_before) as old_committed_before,
	ifThenElse(eden_max_after is null,0L , eden_max_after) as eden_max_after,
	ifThenElse(eden_max_before is null,0L, eden_max_before) as eden_max_before,
	ifThenElse(survivor_max_after is null, 0L , survivor_max_after) as survivor_max_after, 
	ifThenElse(survivor_max_before is null, 0L, survivor_max_before) as survivor_max_before, 
	ifThenElse(old_max_after is null, 0L , old_max_after) as old_max_after,
	ifThenElse(old_max_before is null, 0L , old_max_before) as old_max_before
	
	having not (app_id is null or time_stamp is null)
insert into GCNewStream;



/*process garbage collection data to take average values for one interval(default 1 sec)*/
from GCNewStream#window.timeBatch(1 sec)
select
	app_id,
	
	--time parameters
	max(time_stamp) as time_stamp,
	avg(gc_duration) as gc_duration,

	--take count as minor and major gc frequencies 
	convert(sum(minor), 'double') as minor_gc_freq,
	convert(sum(major), 'double') as major_gc_freq,

	--take average values of memory parameteres
	avg(eden_used_after) as eden_used_after, avg(eden_used_before) as eden_used_before, 
	avg(survivor_used_after) as survivor_used_after, avg(survivor_used_before) as survivor_used_before, 
	avg(old_used_after) as old_used_after, avg(old_used_before) as old_used_before, 
	avg(eden_committed_after) as eden_committed_after , avg(eden_committed_before) as eden_committed_before, 
	avg(survivor_committed_after) as survivor_committed_after, avg(survivor_committed_before) as survivor_committed_before, 
	avg(old_committed_after) as old_committed_after, avg(old_committed_before) as old_committed_before, 
	avg(eden_max_after) as eden_max_after, avg(eden_max_before) as eden_max_before, 
	avg(survivor_max_after) as survivor_max_after, avg(survivor_max_before) as survivor_max_before, 
	avg(old_max_after) as old_max_after, avg(old_max_before) as old_max_before,

	--memory cleared or growing
	ifThenElse(avg(eden_used_before) >= avg(eden_used_after) , 0.0, 1.0 ) as eden_growing,
	ifThenElse(avg(survivor_used_before) >= avg(survivor_used_after) , 0.0 , 1.0 ) as survivor_growing,
	ifThenElse(avg(old_used_before) >= avg(old_used_after) , 0.0 , 1.0 ) as old_growing
  
  	group by app_id
insert into GCProcessedStream;

/*add a delay to wait UsageStreamEvents until the GC streams is processed*/
from UsageStream#window.time(1 sec)
select *
insert expired events into UsageStreamNew;


/*join the common usage data to GC processed data*/
from  UsageStreamNew#window.length(10) as U unidirectional left outer join GCProcessedStream#window.timeLength(5 sec , 5)  as G on ( U.time_stamp-1000 <= G.time_stamp and U.time_stamp >= G.time_stamp and U.app_id == G.app_id)
select 
	-------------General details----------------
	U.time_stamp,
	U.app_id,
	
	----------------Memory usages----------------
	U.heap_used, U.heap_allocated,
	
	-----------------CPU usages------------------
	U.process_cpu_load, U.system_cpu_load, 
	
	------------------GC logs--------------------
	
	--GC frequencies 
	G.minor_gc_freq, G.major_gc_freq,
	
	--cleared spaces as percentages 
	ifThenElse(G.eden_used_before >= G.eden_used_after,
	  ifThenElse(G.eden_used_before == 0 , 0.0 , (G.eden_used_before - G.eden_used_after)/ G.eden_used_before),
	  	(G.eden_used_after - G.eden_used_before)/G.eden_used_after		
	) as eden_cleared, 
	eden_growing,

	ifThenElse(G.survivor_used_before >= G.survivor_used_after,
	  ifThenElse(G.survivor_used_before == 0 , 0.0 , (G.survivor_used_before - G.survivor_used_after) / G.survivor_used_before),
	 	(G.survivor_used_after - G.survivor_used_before) / G.survivor_used_after	
	) as survivor_cleared, 
	survivor_growing,

	ifThenElse(G.old_used_before >= G.old_used_after,
	  ifThenElse(G.old_used_before == 0 , 0.0 ,(G.old_used_before - G.old_used_after) / G.old_used_before),
	  	(G.old_used_after - G.old_used_before) / G.old_used_after		
	) as old_cleared, 
	old_growing,

 	--used memory as percentages 
	ifThenElse(G.eden_committed_after !=0 ,G.eden_used_after / G.eden_committed_after , -1.0) as eden_used, 
	ifThenElse(G.survivor_committed_after !=0 , G.survivor_used_after / G.survivor_committed_after , -1.0) as survivor_used,
	ifThenElse(G.old_committed_after !=0 , G.old_used_after / G.old_committed_after , -1.0 ) as old_used,
	
  	--committed memory as percentages 
	ifThenElse(G.eden_max_after !=0 , G.eden_committed_after / G.eden_max_after, -1.0 ) as eden_committed,
	ifThenElse(G.survivor_max_after !=0 , G.survivor_committed_after / G.survivor_max_after , -1.0) as survivor_committed,
	ifThenElse(G.old_max_after !=0 , G.old_committed_after / G.old_max_after , -1.0) as old_committed, 

	--GC time features
	G.gc_duration
	
insert into ProcessedUsageEventsStreamWithoutValidation;


/*validate the values of features*/
from ProcessedUsageEventsStreamWithoutValidation
select 
	time_stamp,
	app_id,

	--validate memory and cpu usages
	ifThenElse(heap_used >= 0 and heap_used <= 1 , heap_used , -1.0) as heap_used,
	ifThenElse(heap_allocated >= 0 and heap_allocated <= 1 , heap_allocated , -1.0) as heap_allocated,
	
	ifThenElse(process_cpu_load >= 0 and process_cpu_load<= 1, process_cpu_load, -1.0) as process_cpu_load,
	ifThenElse(system_cpu_load >= 0 and system_cpu_load <= 1 , system_cpu_load, -1.0) as system_cpu_load,
	
	--normalize minor and major gc frequencies
	ifThenElse(minor_gc_freq > 0 , ifThenElse(minor_gc_freq < 10 , minor_gc_freq/10 , 1.0 ), 0.0) as minor_gc_freq, --maximum minor gc frequency is taken as 10
	ifThenElse(major_gc_freq > 0 , ifThenElse(major_gc_freq < 10 , major_gc_freq/10 , 1.0 ), 0.0) as major_gc_freq, --maximum major gc frequency is taken as 10
	
	--do not validate memory. they have been already validated
	--if null then return 0
	ifThenElse(eden_cleared is null , 0.0 , eden_cleared) as eden_cleared, 
	ifThenElse(eden_growing is null , 0.0 , eden_growing) as eden_growing, 
	ifThenElse(survivor_cleared is null, 0.0, survivor_cleared) as survivor_cleared, 
	ifThenElse(survivor_growing is null, 0.0, survivor_growing) as survivor_growing, 
	ifThenElse(old_cleared is null, 0.0, old_cleared) as old_cleared, 
	ifThenElse(old_growing is null, 0.0, old_growing) as old_growing,
	
	ifThenElse(eden_used is null, 0.0, eden_used) as eden_used, 
	ifThenElse(survivor_used is null,0.0,survivor_used) as survivor_used,
	ifThenElse(old_used is null,0.0, old_used) as old_used,
	
  	ifThenElse(eden_committed is null,0.0,eden_committed) as eden_committed,
	ifThenElse(survivor_committed is null , 0.0 ,survivor_committed) as survivor_committed, 
	ifThenElse(old_committed is null,0.0, old_committed) as old_committed,
  	
	ifThenElse(gc_duration > 0 , ifThenElse(gc_duration<100 , gc_duration/100 , 1.0),0.0 ) as gc_duration --maximum gc durations is taken as 100
	
insert into ProcessedUsageEventsStream;


/*create a usage stream with time series of data*/
from every( e1=ProcessedUsageEventsStream )-> e2=ProcessedUsageEventsStream[e2.time_stamp > e1.time_stamp and e1.app_id==e2.app_id] -> e3=ProcessedUsageEventsStream[e3.time_stamp > e2.time_stamp and e2.app_id==e3.app_id]
select
	e1.app_id,
	e1.time_stamp as time_stamp_1, e2.time_stamp as time_stamp_2,  e3.time_stamp as time_stamp_3,
	e1.heap_used as heap_used_1, e2.heap_used as heap_used_2, e3.heap_used as heap_used_3, 
	e1.heap_allocated as heap_allocated_1, e2.heap_allocated as heap_allocated_2, e3.heap_allocated as heap_allocated_3, 
	e1.process_cpu_load as process_cpu_load_1 , e2.process_cpu_load as process_cpu_load_2, e3.process_cpu_load as process_cpu_load_3, 
	e1.system_cpu_load as system_cpu_load_1, e2.system_cpu_load as system_cpu_load_2, e3.system_cpu_load as system_cpu_load_3, 
	e1.minor_gc_freq as minor_gc_freq_1 ,e2.minor_gc_freq as minor_gc_freq_2, e3.minor_gc_freq as minor_gc_freq_3,
	e1.major_gc_freq as major_gc_freq_1, e2.major_gc_freq as major_gc_freq_2, e3.major_gc_freq as major_gc_freq_3,
	e1.gc_duration as gc_duration_1 , e2.gc_duration as gc_duration_2 , e3.gc_duration as gc_duration_3,
	e3.eden_cleared, e3.eden_growing, e3.survivor_cleared, e3.survivor_growing, e3.old_cleared, e3.old_growing,
	e3.eden_used, e3.survivor_used, e3.old_used, 
  	e3.eden_committed, e3.survivor_committed, e3.old_committed
insert into ProcessedUsageOutputStreamWithMinor;
